{
  "hash": "399c05b0c28066b72b34815b95b2a63c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hosting internal R packages on r-universe\"\ndate: \"2024-08-15\"\ncategories: [news, code, pkgs, ropensci]\n---\n\n\n![](https://upload.wikimedia.org/wikipedia/commons/2/27/Southern_Blue_Flag_Iris_%28iris_virginica%29_-_Flickr_-_Andrea_Westmoreland.jpg){.preview-image}\n\nThis post attempts to replicate stock analysis with the `coreStatsNMR` package, available via the [NMR Group r-universe](nmrgroup.r-universe.dev/builds). Specifically, using the `statsTable` function outlined in this [post](https://nmrgroup.r-universe.dev/articles/coreStatsNMR/statsTable.html).\n\nFirst, downloading the library using the custom `repos` argument to point to the r-universe: `install.packages(\"coreStatsNMR\", repos = c(\"https://nmrgroup.r-universe.dev\", \"https://cloud.r-project.org\"))`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(coreStatsNMR)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'coreStatsNMR'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:base':\n\n    mode\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nstatsTable(data = iris,\n           summVar = \"Sepal.Length\",\n           groupVar = \"Species\",\n           stats = c(\"n\", \"min\", \"max\", \"mean\", \"weighted.mean\", \"median\", \"sd\", \"iqr\", \"cv\"),\n           accuracy = 0.01,\n           drop0trailing = TRUE) %>% \n  knitr::kable()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in statsTable.data.frame(data = iris, summVar = \"Sepal.Length\", : Using placeholder weights of 1 for all data\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n\n|stat          |setosa |versicolor |virginica |Total |\n|:-------------|:------|:----------|:---------|:-----|\n|n             |50     |50         |50        |150   |\n|min           |4.30   |4.90       |4.90      |4.30  |\n|max           |5.80   |7.00       |7.90      |7.90  |\n|mean          |5.01   |5.94       |6.59      |5.84  |\n|weighted.mean |5.01   |5.94       |6.59      |5.84  |\n|median        |5.00   |5.90       |6.50      |5.80  |\n|sd            |0.35   |0.52       |0.64      |0.83  |\n|iqr           |0.40   |0.70       |0.67      |1.30  |\n|cv            |0.07   |0.09       |0.10      |0.14  |\n\n\n:::\n:::\n\n### So what?\n\nYay! We can run summary statistics on stock R data with our own package. Why do this? We already can write expressive pipelines with various packages: `dplyr`, `data.table`, `collapse`, or `polars` is not apparent.\n\nFor a consulting firm, such as my previous employer, there is value in creating wrapped versions of the stock `coreStats` functions, along with documentation, which incorporate project/client constraints. There is also the marketing value of developing and participating in the broader culture of open-source software (OSS). \n\nInternal and/or public packages are also ways to embed invaluable organizational knowledge, e.g. in a package's testing suite / warnings / errors / documentation. Of course, embedding this knowledge requires caution so that only the sources/methods/etc appropriate for public use are exposed in public repos like the r-universe. ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}