---
title: "Hosting internal R packages on r-universe"
date: "2024-08-15"
categories: [news, code, pkgs, ropensci]
---

![](https://upload.wikimedia.org/wikipedia/commons/2/27/Southern_Blue_Flag_Iris_%28iris_virginica%29_-_Flickr_-_Andrea_Westmoreland.jpg){.preview-image}

This post attempts to replicate stock analysis with the `coreStatsNMR` package, available via the [NMR Group r-universe](nmrgroup.r-universe.dev/builds). Specifically, using the `statsTable` function outlined in this [post](https://nmrgroup.r-universe.dev/articles/coreStatsNMR/statsTable.html).

First, downloading the library using the custom `repos` argument to point to the r-universe: `install.packages("coreStatsNMR", repos = c("https://nmrgroup.r-universe.dev", "https://cloud.r-project.org"))`

```{r}
library(coreStatsNMR)
library(dplyr)

statsTable(data = iris,
           summVar = "Sepal.Length",
           groupVar = "Species",
           stats = c("n", "min", "max", "mean", "weighted.mean", "median", "sd", "iqr", "cv"),
           accuracy = 0.01,
           drop0trailing = TRUE) %>% 
  knitr::kable()
```
### So what?

Yay! We can run summary statistics on stock R data with our own package. Why do this? We already can write expressive pipelines with various packages: `dplyr`, `data.table`, `collapse`, or `polars` is not apparent.

For a consulting firm, such as my previous employer, there is value in creating wrapped versions of the stock `coreStats` functions, along with documentation, which incorporate project/client constraints. There is also the marketing value of developing and participating in the broader culture of open-source software (OSS). 

Internal and/or public packages are also ways to embed invaluable organizational knowledge, e.g. in a package's testing suite / warnings / errors / documentation. Of course, embedding this knowledge requires caution so that only the sources/methods/etc appropriate for public use are exposed in public repos like the r-universe. 